import React, { useState } from 'react';
import {
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  Button,
  TextField,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Box,
  Typography,
  Alert,
} from '@mui/material';
import { useSocket } from '../context/SocketContext';

const CreateAlertDialog = ({ open, onClose, stations }) => {
  const [formData, setFormData] = useState({
    station_id: '',
    alert_type: '',
    severity: '',
    message: '',
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  
  const socket = useSocket();

  const alertTypes = [
    { value: 'equipment_failure', label: 'H·ªèng h√≥c thi·∫øt b·ªã' },
    { value: 'quality_issue', label: 'V·∫•n ƒë·ªÅ ch·∫•t l∆∞·ª£ng' },
    { value: 'material_shortage', label: 'Thi·∫øu nguy√™n li·ªáu' },
    { value: 'safety_concern', label: 'V·∫•n ƒë·ªÅ an to√†n' },
    { value: 'maintenance_required', label: 'C·∫ßn b·∫£o tr√¨' },
    { value: 'operator_assistance', label: 'C·∫ßn h·ªó tr·ª£' },
    { value: 'other', label: 'Kh√°c' },
  ];

  const severityLevels = [
    { value: 'low', label: 'Th·∫•p', color: 'success' },
    { value: 'medium', label: 'Trung b√¨nh', color: 'info' },
    { value: 'high', label: 'Cao', color: 'warning' },
    { value: 'critical', label: 'Nghi√™m tr·ªçng', color: 'error' },
  ];

  const handleInputChange = (field, value) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
    setError(''); // Clear error when user types
  };

  const handleSubmit = () => {
    // Validation
    if (!formData.station_id) {
      setError('Vui l√≤ng ch·ªçn tr·∫°m');
      return;
    }
    if (!formData.alert_type) {
      setError('Vui l√≤ng ch·ªçn lo·∫°i c·∫£nh b√°o');
      return;
    }
    if (!formData.severity) {
      setError('Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô c·∫£nh b√°o');
      return;
    }
    if (!formData.message.trim()) {
      setError('Vui l√≤ng nh·∫≠p n·ªôi dung c·∫£nh b√°o');
      return;
    }

    setLoading(true);
    setError('');

    if (socket) {
      socket.emit('create_alert', formData);
      
      // Listen for response
      socket.once('alert_created', (response) => {
        setLoading(false);
        if (response.success) {
          handleClose();
        } else {
          setError('C√≥ l·ªói x·∫£y ra khi t·∫°o c·∫£nh b√°o');
        }
      });

      socket.once('error', (error) => {
        setLoading(false);
        setError(error.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o c·∫£nh b√°o');
      });

      // Timeout fallback
      setTimeout(() => {
        setLoading(false);
        setError('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi t·ª´ server');
      }, 5000);
    } else {
      setLoading(false);
      setError('Kh√¥ng c√≥ k·∫øt n·ªëi ƒë·∫øn server');
    }
  };

  const handleClose = () => {
    setFormData({
      station_id: '',
      alert_type: '',
      severity: '',
      message: '',
    });
    setError('');
    setLoading(false);
    onClose();
  };

  return (
    <Dialog open={open} onClose={handleClose} maxWidth="sm" fullWidth>
      <DialogTitle>
        <Typography variant="h6" component="div">
          üö® T·∫°o C·∫£nh B√°o M·ªõi
        </Typography>
        <Typography variant="body2" color="text.secondary">
          Th√¥ng b√°o s·ª± c·ªë ho·∫∑c v·∫•n ƒë·ªÅ t·∫°i tr·∫°m s·∫£n xu·∫•t
        </Typography>
      </DialogTitle>
      
      <DialogContent>
        {error && (
          <Alert severity="error" sx={{ mb: 2 }}>
            {error}
          </Alert>
        )}

        <Box sx={{ display: 'flex', flexDirection: 'column', gap: 2, mt: 1 }}>
          {/* Station Selection */}
          <FormControl fullWidth>
            <InputLabel>Ch·ªçn tr·∫°m</InputLabel>
            <Select
              value={formData.station_id}
              label="Ch·ªçn tr·∫°m"
              onChange={(e) => handleInputChange('station_id', e.target.value)}
            >
              {stations.map((station) => (
                <MenuItem key={station.id} value={station.id}>
                  {station.name} ({station.code})
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {/* Alert Type */}
          <FormControl fullWidth>
            <InputLabel>Lo·∫°i c·∫£nh b√°o</InputLabel>
            <Select
              value={formData.alert_type}
              label="Lo·∫°i c·∫£nh b√°o"
              onChange={(e) => handleInputChange('alert_type', e.target.value)}
            >
              {alertTypes.map((type) => (
                <MenuItem key={type.value} value={type.value}>
                  {type.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {/* Severity Level */}
          <FormControl fullWidth>
            <InputLabel>M·ª©c ƒë·ªô c·∫£nh b√°o</InputLabel>
            <Select
              value={formData.severity}
              label="M·ª©c ƒë·ªô c·∫£nh b√°o"
              onChange={(e) => handleInputChange('severity', e.target.value)}
            >
              {severityLevels.map((level) => (
                <MenuItem key={level.value} value={level.value}>
                  <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                    <Box
                      sx={{
                        width: 12,
                        height: 12,
                        borderRadius: '50%',
                        backgroundColor: `${level.color}.main`,
                      }}
                    />
                    {level.label}
                  </Box>
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {/* Message */}
          <TextField
            label="N·ªôi dung c·∫£nh b√°o"
            multiline
            rows={4}
            value={formData.message}
            onChange={(e) => handleInputChange('message', e.target.value)}
            placeholder="M√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ ho·∫∑c s·ª± c·ªë..."
            fullWidth
          />
        </Box>
      </DialogContent>

      <DialogActions sx={{ p: 3, pt: 1 }}>
        <Button onClick={handleClose} disabled={loading}>
          H·ªßy
        </Button>
        <Button 
          onClick={handleSubmit} 
          variant="contained" 
          disabled={loading || !formData.station_id || !formData.alert_type || !formData.severity || !formData.message.trim()}
        >
          {loading ? 'ƒêang t·∫°o...' : 'T·∫°o C·∫£nh B√°o'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

export default CreateAlertDialog; 